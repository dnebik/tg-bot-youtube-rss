import { Telegraf, Markup, Scenes, Context, session } from "telegraf";
import * as process from "node:process";
import { getUserByTgId } from "@/helpers/getUserByTgId";
import { subscribeToYouTubeChannel } from "@/service/youtube";
import { youtubeEvents } from "@/service/youtube-rss";
import { Channel, Video } from "@/generated/prisma";
import prisma from "@/service/prisma";
import { message } from "telegraf/filters";

interface MySessionData extends Scenes.SceneSession {
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface MyContext extends Context {
  scene: Scenes.SceneContextScene<MyContext>;
  session: MySessionData;
}

const BOT_TOKEN = process.env.BOT_TOKEN;
const ITEMS_PER_PAGE = 6;

if (!BOT_TOKEN) {
  throw new Error("BOT_TOKEN is not defined");
}

const bot = new Telegraf<MyContext>(BOT_TOKEN);

bot.telegram.setMyCommands([
  { command: "/start", description: "–û –±–æ—Ç–µ" },
  { command: "/subs", description: "–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫" },
  { command: "/sub", description: "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" },
]);

const keyboard = Markup.keyboard([["üÜï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "üìã –ü–æ–¥–ø–∏—Å–∫–∏"]]).resize();

bot.start((ctx) => {
  ctx.reply(
    `
    –ü—Ä–∏–≤–µ—Ç! üëãüéâ
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Å YouTube-–∫–∞–Ω–∞–ª–æ–≤! üé•üîî

üëá –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:

üìå –ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:
<code>/sub</code>

üìã –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞–ø–∏—à–∏:
<code>/subs</code>

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —É–¥–æ–±–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ! ‚¨áÔ∏èüòâ

–û—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ —Å–≤—è–∑–∏ —Å –ª—é–±–∏–º—ã–º–∏ –∞–≤—Ç–æ—Ä–∞–º–∏! ‚ù§Ô∏èüì∫
    `,
    {
      parse_mode: "HTML",
      ...keyboard,
    },
  );
});

const subscribeScene = new Scenes.BaseScene<MyContext>("subscribe");
const stage = new Scenes.Stage<MyContext>([subscribeScene]);

bot.use(session());
bot.use(stage.middleware());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
subscribeScene.enter(async (ctx) => {
  await ctx.reply(
    "üì© –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–∫–∞–Ω–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!\n\n" +
      "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.youtube.com/@LinusTechTips\n\n" +
      "‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
    {
      link_preview_options: {
        is_disabled: true,
      },
      ...Markup.keyboard([["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]])
        .oneTime()
        .resize(),
    },
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
subscribeScene.hears("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", async (ctx) => {
  await ctx.reply("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", keyboard);
  return await ctx.scene.leave();
});

async function handleSubscribeSceneCancel(url: string, ctx: any) {
  const user = await getUserByTgId(String(ctx.chat.id));
  await subscribeToYouTubeChannel(user.id, url);
  await ctx.reply("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!", keyboard);
}

subscribeScene.on(message("text"), async (ctx) => {
  const url = ctx.message.text;
  try {
    await handleSubscribeSceneCancel(url, ctx);
    await ctx.scene.leave();
  } catch (e) {
    ctx.reply(
      "üò• –û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É.\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª –Ω–∏–∂–µ ‚¨áÔ∏è",
    );
  }
});
// –î–æ–±–∞–≤–∏–º —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
subscribeScene.on(message(), async (ctx) => {
  await ctx.reply(
    "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª **–≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞** –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É **–û—Ç–º–µ–Ω–∞** –Ω–∏–∂–µ ‚¨áÔ∏è",
  );
});

bot.command("sub", (ctx) => {
  return ctx.scene.enter("subscribe");
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subs
bot.command("subs", async (ctx) => {
  await showSubscriptionsPage(ctx, 0);
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
bot.hears("üÜï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", (ctx) => {
  return ctx.scene.enter("subscribe");
});

bot.hears("üìã –ü–æ–¥–ø–∏—Å–∫–∏", async (ctx) => {
  await showSubscriptionsPage(ctx, 0);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–æ–∫
async function showSubscriptionsPage(ctx: any, page: number) {
  const subs = await prisma.subscription.findMany({
    where: {
      user: {
        telegramId: String(ctx.chat.id),
      },
    },
    include: {
      channel: true,
    },
  });

  if (!subs.length) {
    return ctx.reply("üîç –ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.\n–î–∞–≤–∞–π —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º? üòâ", {
      ...keyboard,
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üÜï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "subscribe")],
      ]),
    });
  }

  const totalPages = Math.ceil(subs.length / ITEMS_PER_PAGE);
  const startIndex = page * ITEMS_PER_PAGE;
  const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, subs.length);
  const currentPageSubs = subs.slice(startIndex, endIndex);

  let message = "–¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n";
  currentPageSubs.forEach((sub, idx) => {
    const globalIndex = startIndex + idx + 1;
    message += `\n${globalIndex}. <a href="https://youtube.com/@${sub.channel.channelName}">${sub.channel.title}</a>`;
  });

  message += `\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è
  const keyboardInline = [];

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
  for (let i = 0; i < currentPageSubs.length; i += 2) {
    const row = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –≤ –ø–∞—Ä–µ
    const globalIndex1 = startIndex + i + 1;
    row.push({
      text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${globalIndex1}`,
      callback_data: `delete_sub:${currentPageSubs[i].id}`,
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (i + 1 < currentPageSubs.length) {
      const globalIndex2 = startIndex + i + 2;
      row.push({
        text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${globalIndex2}`,
        callback_data: `delete_sub:${currentPageSubs[i + 1].id}`,
      });
    }

    keyboardInline.push(row);
  }

  // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navigationRow = [];
  if (page > 0) {
    navigationRow.push({
      text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
      callback_data: `page:${page - 1}`,
    });
  }
  if (page < totalPages - 1) {
    navigationRow.push({
      text: "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
      callback_data: `page:${page + 1}`,
    });
  }
  if (navigationRow.length > 0) {
    keyboardInline.push(navigationRow);
  }

  await ctx.reply(message, {
    parse_mode: "HTML",
    link_preview_options: {
      is_disabled: true,
    },
    ...keyboard,
    ...Markup.inlineKeyboard(keyboardInline),
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
bot.action(/^page:(\d+)$/, async (ctx) => {
  const page = parseInt(ctx.match[1]);
  await ctx.answerCbQuery();
  await showSubscriptionsPage(ctx, page);
  await ctx.deleteMessage();
});

bot.action("subscribe", (ctx) => {
  ctx.answerCbQuery();
  return ctx.scene.enter("subscribe");
});

bot.action(/^delete_sub:(.+)$/, async (ctx) => {
  const subId = ctx.match[1];

  try {
    await prisma.subscription.delete({
      where: {
        id: Number(subId),
      },
    });

    await ctx.answerCbQuery("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞!");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const currentPage = 0; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await showSubscriptionsPage(ctx, currentPage);
    await ctx.deleteMessage();
  } catch (error) {
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏");
  }
});

async function handleVideoAdded(video: Video, channel: Channel) {
  const users = await prisma.user.findMany({
    where: {
      subscriptions: {
        some: {
          channelId: channel.id,
        },
      },
    },
  });

  if (!users.length) return;

  for (const user of users) {
    const message = `‚ú® –ù–æ–≤–∏–Ω–∫–∞ –Ω–∞ <b>${channel.title}</b>:\n <a href="${video.url}">${video.title}</a>`;

    await bot.telegram.sendMessage(user.telegramId, message, {
      parse_mode: "HTML",
      link_preview_options: {
        is_disabled: false,
      },
    });

    prisma.notification.create({
      data: {
        userId: user.id,
        videoId: video.id,
      },
    });
  }
}
youtubeEvents.add("video-added", handleVideoAdded);

export function startBot() {
  bot.launch();
}
